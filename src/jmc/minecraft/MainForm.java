/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jmc.minecraft;

import java.awt.Frame;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.io.StringWriter;

import jmc.minecraft.utils.ConfigLoaderCore;
import jmc.minecraft.utils.GlobalVar;
import jmc.minecraft.utils.Utils;

import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Locale;
import java.util.Scanner;
import java.util.regex.Pattern;

import javax.swing.JProgressBar;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.StyledDocument;

import jmc.minecraft.utils.LauncherUpdater;
import jmc.minecraft.utils.MCGameRuner;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.BoxLayout;

import java.awt.BorderLayout;

import javax.swing.JPanel;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.FlowLayout;

import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.border.EmptyBorder;

import java.awt.Insets;
import java.awt.Color;

import javax.swing.JCheckBox;

import java.awt.Font;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 * 
 * @author DimanA90
 */
public class MainForm extends javax.swing.JFrame {
	// private javax.swing.JButton ButtonBugLink;
	private static javax.swing.JButton ButtonLogin;
	private javax.swing.JCheckBox CheckBoxSave;
	public javax.swing.JComboBox ComboBoxSelectClient;
	private static javax.swing.JEditorPane EditorPaneNews;
	// private javax.swing.JLabel LabelRegistration;
	private javax.swing.JLabel LabelStatus;
	public javax.swing.JLabel LabelStatusText;
	private javax.swing.JLabel LabelUsername;
	public final javax.swing.JPanel PanelMain = new TexturedPanel();
	public javax.swing.JPasswordField PasswordField;
	public javax.swing.JTextPane TextPaneClientInfo;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JLabel labelPassword;
	private javax.swing.JPanel panelControls;
	private javax.swing.JPanel panelNews;
	public javax.swing.JTextField textFieldUsername;
	private JPanel panelLog;
	public static JTextPane textPaneLog = new JTextPane();
	public static JCheckBox CheckBoxShaders;

	// End of variables declaration//GEN-END:variables
	
	/**
	 * Creates new form MainForm
	 */
	public MainForm() {
		initComponents();
		/*
		 * Check connect to host
		 */
		if (!Utils.isOnline()) {
			GlobalVar.isOnline = false;
			SetStatus("Оффлайн");
		} else {
			GlobalVar.isOnline = true;
			SetStatus("Онлайн");
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		panelNews = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		EditorPaneNews = new javax.swing.JEditorPane();
		EditorPaneNews.setForeground(Color.WHITE);
		EditorPaneNews.setBackground(Color.DARK_GRAY);
		panelControls = new TexturedPanel();
		panelControls.setBorder(null);
		LabelUsername = new javax.swing.JLabel();
		labelPassword = new javax.swing.JLabel();
		textFieldUsername = new javax.swing.JTextField();
		textFieldUsername.setBackground(Color.WHITE);
		textFieldUsername.setForeground(Color.DARK_GRAY);
		PasswordField = new javax.swing.JPasswordField();
		CheckBoxSave = new javax.swing.JCheckBox();
		ButtonLogin = new javax.swing.JButton();
		LabelStatus = new javax.swing.JLabel();
		ComboBoxSelectClient = new javax.swing.JComboBox();
		// LabelRegistration = new javax.swing.JLabel();
		LabelStatusText = new javax.swing.JLabel();
		// ButtonBugLink = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle(GlobalVar.MainWndTitle);
		setName("MainWindow");

		panelNews.setBackground(new java.awt.Color(204, 204, 204));

		EditorPaneNews.setEditable(false);
		EditorPaneNews.setBorder(null);
		EditorPaneNews.setDefaultLocale(new Locale("UTF-8"));
		EditorPaneNews.setContentType("text/html"); // NOI18N
		EditorPaneNews
				.setText("<html><body><font color=\\\"#808080\\\"><br><br><br><br><br><br><br><center>Loading update news..</center></font></body></html>");
		jScrollPane2.setViewportView(EditorPaneNews);
		EditorPaneNews.addHyperlinkListener(new HyperlinkListener() {
			public void hyperlinkUpdate(HyperlinkEvent he) {
				if (he.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
					try {
						Utils.openLink(he.getURL().toURI());
					} catch (Exception e) {
						e.printStackTrace();
					}
			}
		});
		new Thread() {
			public void run() {
				try {
					EditorPaneNews.setPage(new URL(GlobalVar.NewsURL));
				} catch (Exception e) {
					// e.printStackTrace();
					EditorPaneNews
							.setText("<html><body><font color=\"#808080\"><br><br><br><br><br><br><br><center>Failed to update news<br></center></font></body></html>");
				}
			}
		}.start();

		panelControls.setBackground(new java.awt.Color(204, 204, 204));
		panelControls.setToolTipText("");
		panelControls.setMaximumSize(new java.awt.Dimension(231, 32767));
		panelControls.setName(""); // NOI18N

		LabelUsername.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		LabelUsername.setForeground(new java.awt.Color(255, 255, 255));
		LabelUsername.setText("Логин:");
		LabelUsername.setFocusable(false);

		labelPassword.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		labelPassword.setForeground(new java.awt.Color(255, 255, 255));
		labelPassword.setText("Пароль:");
		labelPassword.setFocusable(false);

		textFieldUsername.setText(GlobalVar.userName);
		textFieldUsername.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				textFieldUsernameFocusLost(evt);
			}
		});

		PasswordField.setText(GlobalVar.password);
		PasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				PasswordFieldFocusLost(evt);
			}
		});

		CheckBoxSave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		CheckBoxSave.setForeground(new java.awt.Color(255, 255, 255));
		CheckBoxSave.setSelected(true);
		CheckBoxSave.setText("Запомнить");
		CheckBoxSave.setToolTipText("");
		CheckBoxSave.setOpaque(false);

		ButtonLogin.setText("Играть");
		ButtonLogin.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ButtonLoginActionPerformed(evt);
			}
		});

		LabelStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		LabelStatus.setForeground(new java.awt.Color(255, 0, 0));
		LabelStatus.setText("Статус:");
		LabelStatus.setFocusable(false);
		LabelStatus
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

		ComboBoxSelectClient.setMaximumRowCount(16);
		ComboBoxSelectClient.setModel(new javax.swing.DefaultComboBoxModel(
				GlobalVar.ClientNames));
		ComboBoxSelectClient.setSelectedIndex(GlobalVar.CurrentServer);
		ComboBoxSelectClient.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				ComboBoxSelectClientItemStateChanged(evt);
			}
		});
		getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.X_AXIS));


		LabelStatusText.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		LabelStatusText.setForeground(new java.awt.Color(255, 0, 0));
		LabelStatusText.setText("Онлайн");
		LabelStatusText.setFocusable(false);
		LabelStatusText
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		TextPaneClientInfo = new javax.swing.JTextPane();
		TextPaneClientInfo.setForeground(Color.WHITE);
		TextPaneClientInfo.setBackground(Color.DARK_GRAY);
		TextPaneClientInfo.setMargin(new Insets(6, 6, 6, 6));
		TextPaneClientInfo.setBorder(null);
		
				TextPaneClientInfo.setEditable(false);
				TextPaneClientInfo.setContentType("text/html"); // NOI18N
				TextPaneClientInfo.setText("<html>" + GlobalVar.clientinfo + "</html>");
		
		CheckBoxShaders = new JCheckBox("Включить шейдеры");
		CheckBoxShaders.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				Boolean res = Utils.setShaderEnable(GlobalVar.itemsServers[GlobalVar.CurrentServer],CheckBoxShaders.isSelected());
				if (!res) {
					Log("Can`t enable shaders");
					CheckBoxShaders.setSelected(false);
				}
			}
		});
		CheckBoxShaders.setOpaque(false);
		CheckBoxShaders.setFont(new Font("Tahoma", Font.BOLD, 11));
		CheckBoxShaders.setForeground(Color.WHITE);

		CheckBoxShaders.setSelected(Utils.getShadersEnable(GlobalVar.itemsServers[GlobalVar.CurrentServer]));
		
		javax.swing.GroupLayout panelControlsLayout = new javax.swing.GroupLayout(
				panelControls);
		panelControlsLayout.setHorizontalGroup(
			panelControlsLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(panelControlsLayout.createSequentialGroup()
					.addContainerGap()
					.addGroup(panelControlsLayout.createParallelGroup(Alignment.LEADING)
						.addComponent(CheckBoxShaders)
						.addComponent(TextPaneClientInfo, GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
						.addGroup(panelControlsLayout.createSequentialGroup()
							.addGroup(panelControlsLayout.createParallelGroup(Alignment.LEADING)
								.addComponent(LabelUsername)
								.addComponent(labelPassword))
							.addGap(18)
							.addGroup(panelControlsLayout.createParallelGroup(Alignment.LEADING)
								.addComponent(PasswordField, 146, 146, 146)
								.addComponent(textFieldUsername, 146, 146, 146)))
						.addComponent(ComboBoxSelectClient, 0, 210, Short.MAX_VALUE)
						.addGroup(panelControlsLayout.createSequentialGroup()
							.addComponent(CheckBoxSave)
							.addGap(26)
							.addComponent(ButtonLogin, GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
						.addGroup(panelControlsLayout.createSequentialGroup()
							.addComponent(LabelStatus)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(LabelStatusText, GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)))
					.addContainerGap())
		);
		panelControlsLayout.setVerticalGroup(
			panelControlsLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(panelControlsLayout.createSequentialGroup()
					.addContainerGap()
					.addGroup(panelControlsLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(LabelUsername)
						.addComponent(textFieldUsername, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(panelControlsLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(labelPassword)
						.addComponent(PasswordField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(panelControlsLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(ButtonLogin)
						.addComponent(CheckBoxSave))
					.addGap(10)
					.addComponent(CheckBoxShaders)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(panelControlsLayout.createParallelGroup(Alignment.LEADING, false)
						.addComponent(LabelStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(LabelStatusText, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(ComboBoxSelectClient, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(TextPaneClientInfo, GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
					.addContainerGap())
		);
		panelControlsLayout.setHonorsVisibility(false);
		panelControls.setLayout(panelControlsLayout);
		
		panelLog = new JPanel();
		GroupLayout gl_PanelMain = new GroupLayout(PanelMain);
		gl_PanelMain.setHorizontalGroup(
			gl_PanelMain.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PanelMain.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_PanelMain.createParallelGroup(Alignment.LEADING)
						.addComponent(panelNews, GroupLayout.PREFERRED_SIZE, 619, GroupLayout.PREFERRED_SIZE)
						.addComponent(panelLog, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
					.addGap(19)
					.addComponent(panelControls, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addContainerGap())
		);
		gl_PanelMain.setVerticalGroup(
			gl_PanelMain.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PanelMain.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_PanelMain.createParallelGroup(Alignment.LEADING)
						.addComponent(panelControls, GroupLayout.PREFERRED_SIZE, 670, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PanelMain.createSequentialGroup()
							.addComponent(panelNews, GroupLayout.PREFERRED_SIZE, 538, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(panelLog, GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))
					.addContainerGap())
		);
		panelLog.setLayout(new BoxLayout(panelLog, BoxLayout.X_AXIS));
		
		JScrollPane scrollPane = new JScrollPane();
		panelLog.add(scrollPane);
		textPaneLog.setBackground(Color.DARK_GRAY);
		textPaneLog.setForeground(Color.WHITE);
		
		
		textPaneLog.setEditable(false);
		scrollPane.setViewportView(textPaneLog);
		panelNews.setLayout(new BoxLayout(panelNews, BoxLayout.X_AXIS));
		panelNews.add(jScrollPane2);
		PanelMain.setLayout(gl_PanelMain);
		getContentPane().add(PanelMain);

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	public void SetStatus(String message) {
		LabelStatusText.setText(message);
	}

	private void ComboBoxSelectClientItemStateChanged(
			java.awt.event.ItemEvent evt) {// GEN-FIRST:event_ComboBoxSelectClientItemStateChanged
		// TODO add your handling code here:
		GlobalVar.CurrentServer = ComboBoxSelectClient.getSelectedIndex();
		ConfigLoaderCore cfs = new ConfigLoaderCore();
		cfs.LoadClientConfig(GlobalVar.itemsServers[GlobalVar.CurrentServer]);
		CheckBoxShaders.setSelected(Utils.getShadersEnable(GlobalVar.itemsServers[GlobalVar.CurrentServer]));
		if (GlobalVar.clientinfo != "" | GlobalVar.clientinfo != null)
			TextPaneClientInfo.setText(GlobalVar.clientinfo); // Set new client
																// info
		else
			TextPaneClientInfo
					.setText("<html><body><font color=\"#808080\"><br><br><br><br><br><br><br><center>Описание отсутствует<br></center></font></body></html>");
		
	}// GEN-LAST:event_ComboBoxSelectClientItemStateChanged

	private void ButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonLoginActionPerformed
		// RunGame.Init();
		ConfigLoaderCore cfg = new ConfigLoaderCore();
		cfg.loadCurrentClientConfig();
		FormStageTwo(); // /Пиздец бля
	}// GEN-LAST:event_ButtonLoginActionPerformed

	private void textFieldUsernameFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_textFieldUsernameFocusLost
		GlobalVar.userName = textFieldUsername.getText();
	}// GEN-LAST:event_textFieldUsernameFocusLost

	private void PasswordFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_PasswordFieldFocusLost
		GlobalVar.password = PasswordField.getText();
	}// GEN-LAST:event_PasswordFieldFocusLost

	public void FormStageTwo() {
		if (GlobalVar.isOnline)// is Online?
		{
			if (Utils.login(GlobalVar.userName, GlobalVar.password)) //TODO: Сделать рандомный токен
																	
			{
				// TODO: this
				PanelMain.removeAll();
				// ////////////////////////////
				final JProgressBar ProgressBarCurrent = new javax.swing.JProgressBar();
				final JProgressBar ProgressBarTotal = new javax.swing.JProgressBar();

				ProgressBarCurrent.setStringPainted(true);
				ProgressBarTotal.setStringPainted(true);

				javax.swing.GroupLayout PanelMain1Layout = new javax.swing.GroupLayout(
						PanelMain);
				PanelMain.setLayout(PanelMain1Layout);
				PanelMain1Layout
						.setHorizontalGroup(PanelMain1Layout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(
										PanelMain1Layout
												.createSequentialGroup()
												.addContainerGap()
												.addGroup(
														PanelMain1Layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(
																		ProgressBarTotal,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(
																		ProgressBarCurrent,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE))
												.addContainerGap())

						);
				PanelMain1Layout
						.setVerticalGroup(PanelMain1Layout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(
										PanelMain1Layout
												.createSequentialGroup()
												/*
												 * .addGap(124, 124, 124)
												 * .addComponent(LabelStatus,
												 * javax
												 * .swing.GroupLayout.PREFERRED_SIZE
												 * , 51,
												 * javax.swing.GroupLayout.
												 * PREFERRED_SIZE)
												 */
												.addGap(44, 44, 44)
												.addComponent(
														ProgressBarCurrent,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														30,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(18, 18, 18)
												.addComponent(
														ProgressBarTotal,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														30,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addContainerGap(253,
														Short.MAX_VALUE)));

				javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
						getContentPane());
				getContentPane().setLayout(layout);
				layout.setHorizontalGroup(layout.createParallelGroup(
						javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(PanelMain,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE));
				layout.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout.createSequentialGroup()
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												PanelMain,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												278, Short.MAX_VALUE)));

				this.revalidate();
				this.repaint();

				RunGame.Init(ProgressBarCurrent, ProgressBarTotal); // Запускаем
																	// обновление,
																	// потом
																	// игру
			} else {// Ничего не делаем

			}
			;
		} else // Offline, run game offline
		{
			MCGameRuner grun = new MCGameRuner();
			grun.LetsGame(false);
			// System.exit(0);
		}

	}

	/**
	 * @param args
	 *            the command line arguments
	 */

	public static void main(String args[]) throws ClassNotFoundException {
		/*
		 * Load core config
		 */
		
		ConfigLoaderCore cf = new ConfigLoaderCore();

		cf.LoadCoreConfig(); // Load core properties
		// Проверяем обновление и качаем если надо
		jmc.minecraft.utils.LauncherUpdater.UpdateLauncher(); //TODO обновыление лаунчера

		cf.LoadUserConfig(); // Load user config
		cf.LoadClientConfig(GlobalVar.itemsServers[GlobalVar.CurrentServer]);// Load
																				// first
																				// info
																				// about
																				// client

		
		
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {

				new MainForm().setVisible(true);
				
				Log("Проверка совместимости");
				Log("Запуск под OS: "+System.getProperty("os.name")+" ("+Utils.getPlatform().toString()+")");
				Log("Память всего:"+Utils.getOSTotalMemory()+" свободно:"+Utils.getOSFreeMemory());
				
				//JavaInfo java = Settings.getSettings().getCurrentJava();
				
				Log("Java ver: "+Utils.getCurrentJava() + " " + System.getProperty("sun.arch.data.model") +" path:"+System.getProperty("java.home"));
				String[] s = Utils.getCurrentJava().split("[._-]");
				int major = Integer.parseInt(s[0]);
		        int minor = s.length > 1 ? Integer.parseInt(s[1]) : 0;
		        int revision = s.length > 2 ? Integer.parseInt(s[2]) : 0;
		        int build = s.length > 3 ? Integer.parseInt(s[3]) : 0;
		        
		        ButtonLogin.setEnabled(true);
		        
		        if (GlobalVar.JavaVer17 && !((major == 1) && (minor == 7)) ) {
		        	Log("Версия java должна быть 1.7. Переустановите Java на версию 1.7");
		        	ButtonLogin.setEnabled(false);
		        }
		        
		        if (GlobalVar.Java64 && System.getProperty("sun.arch.data.model").equals("32")) {
		        	Log("Версия java 32bit. Если у Вас 32 битная система, то вы не сможете играть в эту сборку.");
		        	ButtonLogin.setEnabled(false);
		        }
		        
		        if (!System.getProperty("sun.arch.data.model").equals("64")) {
		        	Log("Установленная у Вас версия java 32bit. Рекомендуем установить 64 битную версию для увеличения объема оперативной памяти для приложения.");
		        }
		        
		        
			}
		});

	}

	public static void LogClear() {
		textPaneLog.setText("");
	}

	public static void Log(String text) {
		StyledDocument doc = textPaneLog.getStyledDocument();
		try
		{
		    doc.insertString(doc.getLength(), text+"\n", null );
		}
		catch(Exception e) { System.out.println(e); }
		
	}
}